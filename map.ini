├── src
│   ├── api
│   │   ├── controllers
│   │   │   ├── userController.ts
│   │   │   │   // Handles HTTP requests and responses
│   │   │   │   import { Request, Response } from 'express';
│   │   │   │   import { userService } from '../../services/userService';
│   │   │   │   
│   │   │   │   class UserController {
│   │   │   │     async getAllUsers(req: Request, res: Response) {
│   │   │   │       try {
│   │   │   │         const users = await userService.getAllUsers();
│   │   │   │         return res.status(200).json(users);
│   │   │   │       } catch (error) {
│   │   │   │         return res.status(500).json({ message: 'Server error' });
│   │   │   │       }
│   │   │   │     }
│   │   │   │   
│   │   │   │     async getUserById(req: Request, res: Response) {
│   │   │   │       try {
│   │   │   │         const { id } = req.params;
│   │   │   │         const user = await userService.getUserById(Number(id));
│   │   │   │         if (!user) {
│   │   │   │           return res.status(404).json({ message: 'User not found' });
│   │   │   │         }
│   │   │   │         return res.status(200).json(user);
│   │   │   │       } catch (error) {
│   │   │   │         return res.status(500).json({ message: 'Server error' });
│   │   │   │       }
│   │   │   │     }
│   │   │   │   
│   │   │   │     async createUser(req: Request, res: Response) {
│   │   │   │       try {
│   │   │   │         const userData = req.body;
│   │   │   │         const newUser = await userService.createUser(userData);
│   │   │   │         return res.status(201).json(newUser);
│   │   │   │       } catch (error) {
│   │   │   │         return res.status(400).json({ message: 'Invalid user data' });
│   │   │   │       }
│   │   │   │     }
│   │   │   │   
│   │   │   │     async updateUser(req: Request, res: Response) {
│   │   │   │       try {
│   │   │   │         const { id } = req.params;
│   │   │   │         const userData = req.body;
│   │   │   │         const updatedUser = await userService.updateUser(Number(id), userData);
│   │   │   │         if (!updatedUser) {
│   │   │   │           return res.status(404).json({ message: 'User not found' });
│   │   │   │         }
│   │   │   │         return res.status(200).json(updatedUser);
│   │   │   │       } catch (error) {
│   │   │   │         return res.status(400).json({ message: 'Invalid user data' });
│   │   │   │       }
│   │   │   │     }
│   │   │   │   
│   │   │   │     async deleteUser(req: Request, res: Response) {
│   │   │   │       try {
│   │   │   │         const { id } = req.params;
│   │   │   │         const deleted = await userService.deleteUser(Number(id));
│   │   │   │         if (!deleted) {
│   │   │   │           return res.status(404).json({ message: 'User not found' });
│   │   │   │         }
│   │   │   │         return res.status(204).send();
│   │   │   │       } catch (error) {
│   │   │   │         return res.status(500).json({ message: 'Server error' });
│   │   │   │       }
│   │   │   │     }
│   │   │   │   }
│   │   │   │   
│   │   │   │   export const userController = new UserController();
│   │   │   └── authController.ts
│   │   │   │   // Empty for now, can be implemented for authentication
│   │   ├── routes
│   │   │   ├── userRoutes.ts
│   │   │   │   // Defines API endpoints
│   │   │   │   import { Router } from 'express';
│   │   │   │   import { userController } from '../controllers/userController';
│   │   │   │   import { validateUser } from '../validators/userValidator';
│   │   │   │   import { authMiddleware } from '../middleware/authMiddleware';
│   │   │   │
│   │   │   │   const router = Router();
│   │   │   │   
│   │   │   │   router.get('/', userController.getAllUsers);
│   │   │   │   router.get('/:id', userController.getUserById);
│   │   │   │   router.post('/', validateUser, userController.createUser);
│   │   │   │   router.put('/:id', authMiddleware, validateUser, userController.updateUser);
│   │   │   │   router.delete('/:id', authMiddleware, userController.deleteUser);
│   │   │   │   
│   │   │   │   export default router;
│   │   │   └── authRoutes.ts
│   │   │   │   // Empty for now
│   │   ├── middleware
│   │   │   ├── authMiddleware.ts
│   │   │   │   // Basic auth middleware (placeholder)
│   │   │   │   import { Request, Response, NextFunction } from 'express';
│   │   │   │   
│   │   │   │   export const authMiddleware = (req: Request, res: Response, next: NextFunction) => {
│   │   │   │     // TODO: Implement JWT or other auth verification
│   │   │   │     const token = req.headers.authorization;
│   │   │   │     if (!token) {
│   │   │   │       return res.status(401).json({ message: 'Unauthorized' });
│   │   │   │     }
│   │   │   │     next();
│   │   │   │   };
│   │   │   └── errorMiddleware.ts
│   │   │   │   // Global error handler
│   │   │   │   import { Request, Response, NextFunction } from 'express';
│   │   │   │   
│   │   │   │   export const errorMiddleware = (
│   │   │   │     err: Error,
│   │   │   │     req: Request,
│   │   │   │     res: Response,
│   │   │   │     next: NextFunction
│   │   │   │   ) => {
│   │   │   │     console.error(err.stack);
│   │   │   │     res.status(500).json({ message: 'Something went wrong!' });
│   │   │   │   };
│   │   └── validators
│   │       ├── userValidator.ts
│   │       │   // Validation using express-validator
│   │       │   import { check, validationResult } from 'express-validator';
│   │       │   import { Request, Response, NextFunction } from 'express';
│   │       │   
│   │       │   export const validateUser = [
│   │       │     check('name').notEmpty().withMessage('Name is required'),
│   │       │     check('email').isEmail().withMessage('Invalid email'),
│   │       │     (req: Request, res: Response, next: NextFunction) => {
│   │       │       const errors = validationResult(req);
│   │       │       if (!errors.isEmpty()) {
│   │       │         return res.status(400).json({ errors: errors.array() });
│   │       │       }
│   │       │       next();
│   │       │     },
│   │       │   ];
│   │       └── authValidator.ts
│   │       │   // Empty for now
│   ├── config
│   │   ├── database.ts
│   │   │   // Prisma client setup
│   │   │   import { PrismaClient } from '@prisma/client';
│   │   │   
│   │   │   const prisma = new PrismaClient();
│   │   │   
│   │   │   export default prisma;
│   │   ├── env.ts
│   │   │   // Environment variables
│   │   │   import dotenv from 'dotenv';
│   │   │   
│   │   │   dotenv.config();
│   │   │   
│   │   │   export const env = {
│   │   │     PORT: process.env.PORT || 3000,
│   │   │     DATABASE_URL: process.env.DATABASE_URL || '',
│   │   │     JWT_SECRET: process.env.JWT_SECRET || 'secret',
│   │   │   };
│   │   └── logger.ts
│   │   │   // Winston logger setup
│   │   │   import winston from 'winston';
│   │   │   
│   │   │   const logger = winston.createLogger({
│   │   │     level: 'info',
│   │   │     format: winston.format.combine(
│   │   │       winston.format.timestamp(),
│   │   │       winston.format.json()
│   │   │     ),
│   │   │     transports: [
│   │   │       new winston.transports.Console(),
│   │   │       new winston.transports.File({ filename: 'error.log', level: 'error' }),
│   │   │       new winston.transports.File({ filename: 'combined.log' }),
│   │   │     ],
│   │   │   });
│   │   │   
│   │   │   export default logger;
│   ├── prisma
│   │   ├── schema.prisma
│   │   │   // Prisma schema
│   │   │   generator client {
│   │   │     provider = "prisma-client-js"
│   │   │   }
│   │   │   
│   │   │   datasource db {
│   │   │     provider = "postgresql"
│   │   │     url      = env("DATABASE_URL")
│   │   │   }
│   │   │   
│   │   │   model User {
│   │   │     id        Int      @id @default(autoincrement())
│   │   │     name      String
│   │   │     email     String   @unique
│   │   │     createdAt DateTime @default(now())
│   │   │     updatedAt DateTime @updatedAt
│   │   │   }
│   │   └── migrations
│   │       // Auto-generated by Prisma
│   ├── services
│   │   ├── userService.ts
│   │   │   // Business logic
│   │   │   import prisma from '../config/database';
│   │   │   import { User } from '../types';
│   │   │   
│   │   │   class UserService {
│   │   │     async getAllUsers(): Promise<User[]> {
│   │   │       return prisma.user.findMany();
│   │   │     }
│   │   │   
│   │   │     async getUserById(id: number): Promise<User | null> {
│   │   │       return prisma.user.findUnique({ where: { id } });
│   │   │     }
│   │   │   
│   │   │     async createUser(data: Omit<User, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {
│   │   │       return prisma.user.create({ data });
│   │   │     }
│   │   │   
│   │   │     async updateUser(id: number, data: Partial<Omit<User, 'id' | 'createdAt' | 'updatedAt'>>): Promise<User | null> {
│   │   │       return prisma.user.update({ where: { id }, data });
│   │   │     }
│   │   │   
│   │   │     async deleteUser(id: number): Promise<boolean> {
│   │   │       const user = await prisma.user.delete({ where: { id } });
│   │   │       return !!user;
│   │   │     }
│   │   │   }
│   │   │   
│   │   │   export const userService = new UserService();
│   │   └── authService.ts
│   │   │   // Empty for now
│   ├── types
│   │   └── index.ts
│   │   │   // Type definitions
│   │   │   export interface User {
│   │   │     id: number;
│   │   │     name: string;
│   │   │     email: string;
│   │   │     createdAt: Date;
│   │   │     updatedAt: Date;
│   │   │   }
│   ├── utils
│   │   ├── response.ts
│   │   │   // Response helpers
│   │   │   import { Response } from 'express';
│   │   │   
│   │   │   export const sendSuccess = (res: Response, data: any, status: number = 200) => {
│   │   │     return res.status(status).json({ success: true, data });
│   │   │   };
│   │   │   
│   │   │   export const sendError = (res: Response, message: string, status: number = 400) => {
│   │   │     return res.status(status).json({ success: false, message });
│   │   │   };
│   │   └── helpers.ts
│   │   │   // General utility functions
│   │   │   export const generateRandomId = (): number => {
│   │   │     return Math.floor(Math.random() * 1000000);
│   │   │   };
│   └── app.ts
│   │   // Main application setup
│   │   import express from 'express';
│   │   import userRoutes from './api/routes/userRoutes';
│   │   import { errorMiddleware } from './api/middleware/errorMiddleware';
│   │   import { env } from './config/env';
│   │   import logger from './config/logger';
│   │   
│   │   const app = express();
│   │   
│   │   app.use(express.json());
│   │   app.use('/api/users', userRoutes);
│   │   app.use(errorMiddleware);
│   │   
│   │   app.listen(env.PORT, () => {
│   │     logger.info(`Server running on port ${env.PORT}`);
│   │   });
│   │   
│   │   export default app;
├── tests
│   ├── unit
│   │   └── userService.test.ts
│   │   │   // Unit tests for user service
│   │   │   import { userService } from '../src/services/userService';
│   │   │   import prisma from '../src/config/database';
│   │   │   import { User } from '../src/types';
│   │   │   
│   │   │   jest.mock('../src/config/database');
│   │   │   
│   │   │   describe('UserService', () => {
│   │   │     it('should create a user', async () => {
│   │   │       const mockUser: User = {
│   │   │         id: 1,
│   │   │         name: 'John Doe',
│   │   │         email: 'john@example.com',
│   │   │         createdAt: new Date(),
│   │   │         updatedAt: new Date(),
│   │   │       };
│   │   │   
│   │   │       (prisma.user.create as jest.Mock).mockResolvedValue(mockUser);
│   │   │
│   │   │       const result = await userService.createUser({
│   │   │         name: 'John Doe',
│   │   │         email: 'john@example.com',
│   │   │       });
│   │   │   
│   │   │       expect(result).toEqual(mockUser);
│   │   │     });
│   │   │   });
│   ├── integration
│   │   └── userRoutes.test.ts
│   │   │   // Integration tests for user routes
│   │   │   import supertest from 'supertest';
│   │   │   import app from '../src/app';
│   │   │   
│   │   │   describe('User Routes', () => {
│   │   │     it('GET /api/users should return all users', async () => {
│   │   │       const response = await supertest(app).get('/api/users');
│   │   │       expect(response.status).toBe(200);
│   │   │       expect(response.body).toBeInstanceOf(Array);
│   │   │     });
│   │   │   });
│   └── setup.ts
│   │   // Test setup
│   │   import { PrismaClient } from '@prisma/client';
│   │   
│   │   const prisma = new PrismaClient();
│   │   
│   │   beforeAll(async () => {
│   │     await prisma.$connect();
│   │   });
│   │   
│   │   afterAll(async () => {
│   │     await prisma.$disconnect();
│   │   });
├── .env
│   │   # Environment variables
│   │   PORT=3000
│   │   DATABASE_URL="postgresql://user:password@localhost:5432/dbname?schema=public"
│   │   JWT_SECRET=your_jwt_secret
├── .env.example
│   │   # Example environment variables
│   │   PORT=3000
│   │   DATABASE_URL="postgresql://user:password@localhost:5432/dbname?schema=public"
│   │   JWT_SECRET=your_jwt_secret
├── .gitignore
│   │   node_modules/
│   │   dist/
│   │   .env
│   │   *.log
├── package.json
│   │   {
│   │     "name": "nodejs-prisma-api",
│   │     "version": "1.0.0",
│   │     "scripts": {
│   │       "start": "node dist/app.js",
│   │       "build": "tsc",
│   │       "dev": "nodemon src/app.ts",
│   │       "test": "jest",
│   │       "prisma:generate": "prisma generate",
│   │       "prisma:migrate": "prisma migrate dev"
│   │     },
│   │     "dependencies": {
│   │       "@prisma/client": "^5.7.0",
│   │       "express": "^4.18.2",
│   │       "express-validator": "^7.0.1",
│   │       "dotenv": "^16.3.1",
│   │       "winston": "^3.11.0"
│   │     },
│   │     "devDependencies": {
│   │       "@types/express": "^4.17.21",
│   │       "@types/jest": "^29.5.11",
│   │       "@types/node": "^20.10.5",
│   │       "@types/supertest": "^2.0.16",
│   │       "jest": "^29.7.0",
│   │       "nodemon": "^3.0.2",
│   │       "prisma": "^5.7.0",
│   │       "supertest": "^6.3.3",
│   │       "ts-jest": "^29.1.1",
│   │       "ts-node": "^10.9.2",
│   │       "typescript": "^5.3.3"
│   │     }
│   │   }
├── tsconfig.json
│   │   {
│   │     "compilerOptions": {
│   │       "target": "es2016",
│   │       "module": "commonjs",
│   │       "outDir": "./dist",
│   │       "rootDir": "./src",
│   │       "strict": true,
│   │       "esModuleInterop": true,
│   │       "skipLibCheck": true,
│   │       "forceConsistentCasingInFileNames": true
│   │     },
│   │     "include": ["src/**/*"],
│   │     "exclude": ["node_modules", "tests"]
│   │   }